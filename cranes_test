__author__ = 'buio'
__version__ = '0.1.0'


# script to synchronize 2 or more OctoPrint robots by gcode scheduling
# to run either on a master python machine, on or off-board
# designed to operate 2 crane WASP robots simultaneously
# to test on Jul 30

import json
import requests
import time

# coding: (host,key,gcode name identifier)

"""def layer():
    set_layer=layer_num.value
    print ("Layer number ", set_layer , " selected")
    return set_layer
    """

"""def i():
    set_i=gcode.value
    print ("Gcode number ", set_i , " selected")
    return set_i
    """
 
def start(k):
    if k==1:
        start_button.disable()
        stop_button.enable()
        text.repeat(1000,main_program, args=[1])

    else:
        start_button.enable()
        stop_button.disable()
        text.after(2000,main_program, args=[0])

def main_program(j):
    if j==1:
        
        i=gcode.value
        layer=layer_num.value
        
        alf = (alf_ip.value,'E8A924FBF05F47BEB05D80E43AB9080B','a')
        bet = (bet_ip.value,'E8A924FBF05F47BEB05D80E43AB9080B','b')


        select_crane_file(alf, i, layer)
        select_crane_file(bet, i, layer)

        print_selected(alf)
        print_selected(bet)
        
        i=i+1
        
        state_text_alf = retrieve(alf)['state']['text']
        state_text_bet = retrieve(bet)['state']['text']
        alf_state = alf[2] + " " + state_text_alf + " " + str(i-1)
        alf_gui_state = Text(alf_box, grid=[0,5], text=alf_state, align="left")
        print(bet[2] + " " + state_text_bet + " " + str(i-1))

        if state_text_alf == 'Operational' and state_text_bet == 'Operational':
            print("ferme")

            if select_crane_file(alf, i, layer) == 204:
                print_selected(alf)
                selected_alf = True

            if select_crane_file(bet, i, layer) == 204:
                print_selected(bet)
                selected_bet = True

            if selected_alf and selected_bet:
                i = i + 1
                selected_alf = False
                selected_bet = False
        
        
    
def resume_pause(printer):

    port = 8000
    endpoint = 'job'
    host = printer[0]
    key = printer[1]
    data = json.dumps(

        {
            "command": "pause",
            "action": "resume"
        }
    )

    headers = {
        'Content-type': 'application/json',
        'X-Api-Key': key,
    }
    r = requests.post(
        url="http://{host}:/api/{endpoint}".format(
            host=host,
            port=port,
            endpoint=endpoint
        ),
        data=data,
        headers=headers
    )
    print("resumed")

def retrieve(printer):

    port = 8000
    exclude = '?exclude=temperature,sd'
    endpoint = 'printer' + exclude
    host = printer[0]
    key = printer[1]
    headers = {
        'Content-type': 'application/json',
        'X-Api-Key': key,
    }

    r = requests.get(
        url="http://{host}:/api/{endpoint}".format(
            host=host,
            port=port,
            endpoint=endpoint
        ),
        headers=headers
    )

    return r.json()

        #print(datastore)
        #print(datastore['state']['flags']['paused'])

def select_crane_file(printer,num,layernumber):
    # POST / api / files / local / folder / a_10.gcode
    # HTTP / 1.1
    port = 8000
    folder = str(layernumber)
    endpoint = printer[2] + '_' + str(num) + ".gcode"
    # print(endpoint)
    host = printer[0]
    key = printer[1]

    data = json.dumps(
        {
            "command": "select",
            "print": "false"
        }
    )

    headers = {
        'Content-type': 'application/json',
        'X-Api-Key': key,
    }
    r = requests.post(
        url="http://{host}:/api/files/local/{folder}/{endpoint}".format(
            host=host,
            port=port,
            folder=folder,
            endpoint=endpoint
        ),
        data=data,
        headers=headers
    )
    print("selecting " + endpoint)
    return r.status_code

def print_selected(printer):
    port = 8000
    endpoint = 'job'
    host = printer[0]
    key = printer[1]
    data = json.dumps(

        {
            "command": "start"
        }
    )
    headers = {
        'Content-type': 'application/json',
        'X-Api-Key': key,
    }
    r = requests.post(
        url="http://{host}:/api/{endpoint}".format(
            host=host,
            port=port,
            endpoint=endpoint
        ),
        data=data,
        headers=headers
    )
    print("starting print on " + printer[2])
    return r.status_code


from guizero import App, Box, Text, TextBox, PushButton

app = App(title="Crane WASP collaboration v0.1")

selection_box = Box(app, layout="grid", width="fill", align="bottom", border=True)

text=Text(selection_box, grid=[5,5], text="1")

Text(selection_box, grid=[0,0], text="Select layer", align="left")
layer_num = TextBox(selection_box, grid=[1,0], text="")
layer_button = PushButton(selection_box, grid=[2,0], text="submit")

Text(selection_box, grid=[0,1], text="Select gcode", align="left")
gcode = TextBox(selection_box, grid=[1,1], text="")
gcode_button = PushButton(selection_box, grid=[2,1], text="submit")

start_button = PushButton(selection_box, grid=[2,5], text="START", command=start, args=[1])
stop_button = PushButton(selection_box, grid=[3,5], text="STOP", command=start, args=[0],enabled=False)


alf_box = Box(app, layout="grid", height="fill", width="fill", align="left", border=True)

Text(alf_box, grid=[0,0], text="Crane A", align="left")

Text(alf_box, grid=[0,1], text="IP", align="left")
alf_ip = TextBox(alf_box, grid=[1,1], text="192.168.1.5")
#alf_ip_button = PushButton(alf_box, grid=[2,1], text="submit")




bet_box = Box(app, layout="grid", height="fill", width="fill", align="right", border=True)

Text(bet_box, grid=[0,0], text="Crane B", align="left")

Text(bet_box, grid=[0,1], text="IP", align="left")
bet_ip = TextBox(bet_box, grid=[1,1], text="192.168.1.6")
#bet_ip_button = PushButton(bet_box, grid=[2,1], text="submit")


app.display()

"""
alf = (alf_ip.value,'E8A924FBF05F47BEB05D80E43AB9080B','a')
bet = (bet_ip.value,'E8A924FBF05F47BEB05D80E43AB9080B','b')


select_crane_file(alf, i, layer)
select_crane_file(bet, i, layer)

print_selected(alf)
print_selected(bet)

time.sleep(1)


i = i + 1
"""
"""
while True:
    state_text_alf = retrieve(alf)['state']['text']
    state_text_bet = retrieve(bet)['state']['text']
    alf_state = alf[2] + " " + state_text_alf + " " + str(i-1)
    alf_gui_state = Text(alf_box, grid=[0,5], text=alf_state, align="left")
    print(bet[2] + " " + state_text_bet + " " + str(i-1))

    if state_text_alf == 'Operational' and state_text_bet == 'Operational':
        print("ferme")

        if select_crane_file(alf, i, layer) == 204:
            print_selected(alf)
            selected_alf = True

        if select_crane_file(bet, i, layer) == 204:
            print_selected(bet)
            selected_bet = True

        if selected_alf and selected_bet:
            i = i + 1
            selected_alf = False
            selected_bet = False
                
"""



"""
# TODO pausa manuale

# TODO che non si sbattano
    #   angolo di entrambe
    #   posizione macchina
    #   conversione in polari

# TODO interfaccia grafica
    #   le precedenti +
    #   lancette
    
    status = retrieve()

    if status['state']['flags']['paused']:
        print('printer one is paused')
        print("want to resume? y/n")
        if input() == 'y':
            resume()

"""

#host_Alf = '192.168.12.44'
#key_Alf = 'E8A924FBF05F47BEB05D80E43AB9080B'
#host_Bet = '192.168.12.37'
#key_Bet = 'E8A924FBF05F47BEB05D80E43AB9080B'
